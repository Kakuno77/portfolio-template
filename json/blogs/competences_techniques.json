{
  "slug": "Mes compétences techniques",
  "title": "Compétences techniques",
  "content": {
    "articles": [
      {
        "title": "Programmation de scripts shell",
        "customCss": {},
        "direction": "row",
        "banner": {
          "headline": "Programmation de scripts shell",
          "image": {
            "src": "/img/article-web.png",
            "alt": ""
          }
        },
        "elements": [
          {
            "type": "text",
            "content": "<p><<b>64%</b>, c’est le pourcentage de serveurs dans le monde qui utilisent des variantes de Unix, une famille de système d’exploitation particulièrement connue pour Linux.</br><br>Dans le domaine du DevOps, l'automatisation et l'efficacité sont essentielles pour gérer les infrastructures complexes. Les scripts shell jouent un rôle crucial dans ce contexte, permettant de simplifier et d'automatiser de nombreuses tâches administratives. Lorsqu'ils sont appliqués à la gestion d'un cluster Kubernetes, ces scripts deviennent encore plus puissants, offrant des moyens efficaces pour orchestrer et gérer des conteneurs à grande échelle.</br><h2>Pourquoi Utiliser des Scripts Shell en DevOps ?</h2>Les scripts shell, souvent écrits en Bash, permettent d'exécuter des commandes directement dans le terminal, de façon séquentielle et automatisée. Ils sont particulièrement utiles pour :<li>Automatisation des Tâches Répétitives : Les scripts shell peuvent automatiser des tâches courantes comme les sauvegardes, les mises à jour de paquets, et les vérifications de système.</li><li>Gestion de la Configuration : Ils facilitent le déploiement de configurations homogènes à travers plusieurs serveurs.</li><li>Intégration et Déploiement Continus (CI/CD) : Les scripts peuvent être intégrés dans les pipelines CI/CD pour automatiser les tests et les déploiements.Kubernetes et les Scripts ShellKubernetes est une plateforme open source pour automatiser le déploiement, la mise à l'échelle et la gestion des applications conteneurisées. Utiliser des scripts shell avec Kubernetes permet de :<li>Déploiement et Gestion des Pods : Automatiser le déploiement de pods, services et autres objets Kubernetes.</li><li>Surveillance et Logging : Créer des scripts pour surveiller l'état des clusters et collecter les logs nécessaires pour le dépannage.</li><li>Mise à Jour et Rollback : Automatiser les mises à jour et les retours en arrière des applications.</li><h2>Exemples de Scripts Shell pour Kubernetes</h2>Voici quelques exemples de scripts shell couramment utilisés dans la gestion de clusters Kubernetes :<li> Script de Déploiement</li>src='/img/deployment.jpg/><li> Script de Sauvegarde des Configurations</li>src='/img/backup.jpg’/><b>La programmation de scripts shell est une compétence précieuse pour les ingénieurs DevOps, en particulier lorsqu'il s'agit de gérer des clusters Kubernetes. Ces scripts permettent d'automatiser efficacement de nombreuses tâches, de garantir la cohérence des déploiements, et de simplifier la surveillance et la maintenance des infrastructures. En combinant la puissance de Kubernetes avec la flexibilité des scripts shell, les ingénieurs DevOps peuvent créer des solutions robustes et scalables adaptées aux besoins des entreprises modernes.</br></p>",
            "customCss": {
            }
          }
        ]
      },
      {
        "title": "Rédaction de documentation technique..",
        "customCss": {},
        "direction": "row",
        "banner": {
          "headline": "Rédaction de documentation technique..",
          "image": {
            "src": "/img/article-archi-adaptee.jpg",
            "alt": ""
          }
        },
        "elements": [
          {
            "type": "text",
            "content": "<p></p>",
            "customCss": {
            }
          }
        ]
      },
      {
        "title": "Implémenter un logiciel de qualité, en choisissant des structures de données adaptées et des algorithmes pertinents afin d’assurer la robustesse du logiciel.",
        "customCss": {},
        "direction": "row",
        "banner": {
          "headline": "Implémenter un logiciel de qualité, en choisissant des structures de données adaptées et des algorithmes pertinents afin d’assurer la robustesse du logiciel.",
          "image": {
            "src": "/img/article-devlogiciel.jpg",
            "alt": ""
          }
        },
        "elements": [
          {
            "type": "text",
            "content": "<p>Lorsque l'on développe un logiciel, il est essentiel de veiller à ce qu'il soit de qualité, robuste et fiable. Pour ce faire, l'implémentation du logiciel doit être effectuée en choisissant des structures de données adaptées et des algorithmes pertinents. Cette compétence est cruciale pour garantir que le logiciel fonctionne correctement, qu'il est performant et qu'il peut répondre aux besoins des utilisateurs.</p><h1>Qu’est-ce qu’une structure de donnée ?</h1><p>Une structure de donnée est une manière de stocker une information dans la mémoire vive d’un ordinateur dans l’objectif de la traiter plus facilement. Il existe plusieurs structures de données. </p><h2>Les tableaux</h2><p>Le tableau est la structure de donnée la plus courante, et est enseigné dans toutes les écoles pour les débutants. Dans un tableau, chaque élément est indexé, c’est-à-dire qu’on affecte à chaque donnée un numéro permettant au programme d’y accéder. Ensuite, chaque élément est placé de façon contiguë dans la mémoire.<div class='blog-img-wrapper'><img class='blog-img' src='/img/tableau_standard.png'/></div></p><h2>La liste chaînée</h2><p>Une liste chaînée est une structure de donnée permettant de stocker des données de façon linéaire, tout comme le tableau. Une liste est composée de plusieurs nœuds. Chaque nœud stocke une information particulière (un entier, une chaîne de caractères, etc.), ainsi qu’un lien vers un autre nœud.<div class='blog-img-wrapper'><img class='blog-img' src='/img/liste_chainee.png'></div> Il y a plusieurs différences entre un tableau et une liste chaînée. Dans un tableau, on ne peut stocker qu’un seul type de donnée. Par exemple, si l’on souhaite ajouter une nouvelle donnée dans un tableau stockant que des entiers, notre donnée devra obligatoirement être un entier. Dans une liste chaînée, on peut stocker tout type de données (des entiers, des nombres flottants, des chaînes de caractères, des listes, des tableaux, etc.).<br>De plus, dans un tableau traditionnel, chaque élément est stocké côté à côté en mémoire, tandis que dans une liste chaînée, chaque élément est stocké à des endroits libres, sélectionnés par le système d’exploitation.</p><div class='blog-img-wrapper'><img class='blog-img' src='/img/representation_liste_chainee.png'><i>Représentation d'une liste chaînée en mémoire</i></div><br><br><div class='blog-img-wrapper'><img class='blog-img' src='/img/representation_tableau.jpg'><i>Représentation d'un \"array\" (tableau) en mémoire</i></div><br><p>De plus, il est plus simple d’effectuer des opérations d’insertion et de suppression d’élément dans une liste chaînée. Pour supprimer un élément “A” dans une liste, il suffit de parcourir la liste à partir de la tête de liste jusqu’à tomber sur l’élément précédant “A”, puis remplacer le lien partant de l’élément précédant A vers A par un lien vers l’élément situé après A. <br>Dans un tableau traditionnel, une fois l’élément supprimé, on doit décaler tous les éléments le suivant, vers la gauche pour combler le trou crée par la suppression, ce qui demande du travail supplémentaire pour l’ordinateur.</p><h1>Comment mesure-t-on l’efficacité d’un programme informatique ?</h1><p>Un informaticien sera constamment amené à se poser des questions sur l’efficacité de son programme informatique. On pourrait dire que l’efficacité d’un programme informatique se mesure en observant le temps qu’il met à arriver à terme de son exécution. Cependant, cette hypothèse est biaisé.<br>Prenons un exemple concret. <br>Bob, un élève étudiant en première année d'école d’ingénieurs, a pour exercice d’écrire deux programmes informatiques distincts, A et B, qui doivent trier dans l’ordre croissant un tableau traditionnel contenant 10 nombres entiers. Bob doit utiliser deux approches différentes pour trier un tableau d’entiers, d’où le besoin d’écrire deux programmes séparés.<br>A et B trient leur tableau en suivant un algorithme particulier. On part du principe que l’algorithme qu’A va suivre est théoriquement jugé comme moins efficace que l’algorithme que B suit. <br>Bob veut s’assurer que le programme A sera plus lent que le programme B. <br> Bob utilise un chronomètre et effectue plusieurs expérimentations. Il constate qu’à certains essais, A prend plus de temps que B, et dans d’autres cas, B prend plus de temps. Bob ne comprend pas...<br>En effet, il n’est pas viable de mesurer l’efficacité d’un programme informatique à partir du temps qu’il a pris pour arriver à terme, car il y a beaucoup de facteurs qui entrent en compte et viennent biaiser les résultats comme : <br>Les performances du processeur<br>Les échanges chimiques et thermiques se produisant au niveau des circuits électriques qui viennent créer des perturbations<br>Et bien d’autres.. <br>Pour cela, il n’est pas judicieux de mesurer l’efficacité d’un programme informatique par le temps qu'il prend, mais plutôt en quantité d’opérations qu’il va effectuer pendant tout le cycle de vie de ce dernier.<br>Pour résumer toute cette partie, lorsqu'on parle de structures de données adaptées, cela signifie que le choix des structures de données doit être effectué en fonction des besoins du logiciel. De plus, ce choix doit être fait en prenant en compte la quantité des données, ainsi que la variation de la quantité de données qu’on va stocker, si cette quantité est amenée à augmenter au fil du temps ou non.</p><h1>Le choix des algorithmes</h1><p>De même, le choix des algorithmes est tout aussi important. Les algorithmes pertinents doivent être choisis pour garantir que le logiciel fonctionne correctement, qu'il est rapide et efficace. <br>Il est également important de veiller à la robustesse du logiciel. Cela signifie qu'il doit être capable de gérer les erreurs et les exceptions de manière appropriée, de sorte qu'il puisse continuer à fonctionner même en cas d'erreurs ou de pannes. Pour cela, des techniques de gestion des erreurs et de gestion des exceptions doivent être mises en place.<br>En fin de compte, l'implémentation d'un logiciel de qualité nécessite de choisir des structures de données adaptées et des algorithmes pertinents pour garantir la robustesse du logiciel. Cela permet de garantir que le logiciel fonctionne correctement, qu'il est performant et qu'il peut répondre aux besoins des utilisateurs. La compétence pour implémenter un tel logiciel est donc essentielle pour tout développeur de logiciel.</p>",
            "customCss": {
            }
          }
        ]
      }
    ]
  }
}