{
  "slug": "Mes compétences techniques",
  "title": "Compétences techniques",
  "content": {
    "articles": [
      {
        "title": "Programmation de scripts shell",
        "customCss": {},
        "direction": "row",
        "banner": {
          "headline": "Programmation de scripts shell",
          "image": {
            "src": "/img/shell.png",
            "alt": ""
          }
        },
        "elements": [
          {
            "type": "text",
            "content": "<p><b>64%</b>, c’est le pourcentage de serveurs dans le monde qui utilisent des variantes de Unix, une famille de système d’exploitation particulièrement connue pour Linux.</br><br>Dans le domaine du DevOps, l'automatisation et l'efficacité sont essentielles pour gérer les infrastructures complexes.</br> Les scripts shell jouent un rôle crucial dans ce contexte, permettant de simplifier et d'automatiser de nombreuses tâches administratives.</br> Lorsqu'ils sont appliqués à la gestion d'un cluster Kubernetes, ces scripts deviennent encore plus puissants, offrant des moyens efficaces pour orchestrer et gérer des conteneurs à grande échelle.</br><h2>Pourquoi Utiliser des Scripts Shell en DevOps ?</h2>Les scripts shell, souvent écrits en Bash, permettent d'exécuter des commandes directement dans le terminal, de façon séquentielle et automatisée. Ils sont particulièrement utiles pour :<li><b>Automatisation des Tâches Répétitives</b> : Les scripts shell peuvent automatiser des tâches courantes comme les sauvegardes, les mises à jour de paquets, et les vérifications de système.</li><li><b>Gestion de la Configuration</b> : Ils facilitent le déploiement de configurations homogènes à travers plusieurs serveurs.</li><li><b>Intégration et Déploiement Continus (CI/CD)</b> : Les scripts peuvent être intégrés dans les pipelines CI/CD pour automatiser les tests et les déploiements.Kubernetes et les Scripts ShellKubernetes est une plateforme open source pour automatiser le déploiement, la mise à l'échelle et la gestion des applications conteneurisées. Utiliser des scripts shell avec Kubernetes permet de :<li><b>Déploiement et Gestion des Pods</b>: Automatiser le déploiement de pods, services et autres objets Kubernetes.</li><li><b>Surveillance et Logging</b> : Créer des scripts pour surveiller l'état des clusters et collecter les logs nécessaires pour le dépannage.</li><li><b>Mise à Jour et Rollback</b> : Automatiser les mises à jour et les retours en arrière des applications.</li><h2>Exemple de Scripts Shell pour Kubernetes</h2>Dans le cadre de mon activité professionnelle il est de la plus grande importance de sauvegarder les données qui se trouvent sur un cluter kubernetes.</br>Voici un exemple de script shell pour sauvegarder une base Postgresql sur un stockage S3 comme Minio.</p><div class='blog-img-wrapper'><img class='blog-img' src='/img/bashscript.png'></div><p><br>La programmation de scripts shell est une compétence précieuse pour les ingénieurs DevOps, en particulier lorsqu'il s'agit de gérer des clusters Kubernetes.</br> Ces scripts permettent d'automatiser efficacement de nombreuses tâches, de garantir la cohérence des déploiements, et de simplifier la surveillance et la maintenance des infrastructures.</br> En combinant la puissance de Kubernetes avec la flexibilité des scripts shell, les ingénieurs DevOps peuvent créer des solutions robustes et scalables adaptées aux besoins des entreprises modernes.</br></p>",
            "customCss": {
            }
          }
        ]
      },
      {
        "title": "Rédaction de documentation technique",
        "customCss": {},
        "direction": "row",
        "banner": {
          "headline": "Rédaction de documentation technique",
          "image": {
            "src": "/img/redaction.jpg",
            "alt": ""
          }
        },
        "elements": [
          {
            "type": "text",
            "content": "<p>Je suis convaincu que savoir écrire une documentation technique claire et accessible est une compétence fondamentale pour la réussite de tout projet. Cette documentation sert de guide précieux pour l'ensemble des acteurs impliqués, des développeurs aux data scientists.</br>Cependant elle a pour désavantage d’être fastidieuse et longue à faire, <b>alors pourquoi documenter ?</b></br>La documentation technique est un élément essentiel pour plusieurs raisons :<li><b>Faciliter la compréhension des systèmes et des applications</b> : Une documentation claire et concise permet aux développeurs, aux testeurs et aux opérateurs de comprendre le fonctionnement des systèmes et des applications, facilitant ainsi leur utilisation et leur maintenance.</li><li><b>Améliorer la collaboration</b> : En centralisant la documentation sur un wiki.js, tous les membres de l'équipe ont accès aux mêmes informations, favorisant la communication</li><li><b>Réduire les erreurs et les incidents</b> : Une documentation détaillée permet d'anticiper les problèmes potentiels et de mettre en place des procédures de résolution efficaces, réduisant ainsi le nombre d'erreurs et d'incidents.</li><li><b>Accélérer le développement et la maintenance</b> : En disposant d'une documentation complète, les nouveaux membres de l'équipe peuvent rapidement se familiariser avec les systèmes et les applications, accélérant ainsi le processus de développement et de maintenance.</li><li><b>Assurer la continuité des connaissances</b> : Une documentation bien rédigée garantit la préservation des connaissances, même en cas de départ de membres clés de l'équipe.</li>Comprendre les enjeux de la documentation n’empêche pas d’être confronté à sa lourdeur. Il est donc essentiel de savoir ce qu’il faut documenter.Le champ d'application de la documentation technique est vaste et peut inclure une grande variété d’éléments :</br><li><b>L'architecture des systèmes et des applications</b> : Décrire l'architecture globale des systèmes et des applications, en mettant en évidence les composants, les interconnexions et les technologies utilisées.</li><li><b>Les processus de déploiement et de configuration</b> : Détailler les étapes nécessaires au déploiement et à la configuration des systèmes et des applications, incluant les environnements de développement, de test et de production.</li><li><b>Les fonctionnalités et les cas d’utilisation</b>: Expliquer les fonctionnalités des systèmes et des applications, en illustrant les cas d'utilisation typiques et les scénarios d'utilisation.</li><li><b>Les procédures de dépannage et de résolution des problèmes</b> : Fournir des instructions détaillées pour dépanner et résoudre les problèmes courants rencontrés lors de l'utilisation des systèmes et des applications.</li><li><b>Les bonnes pratiques et les recommandations</b> : Partager les bonnes pratiques et les recommandations pour l'utilisation efficace et sécurisée des systèmes et des applications.</li></br></En bref, adopter la rédaction de la documentation c’est améliorer la communication et la collaboration des équipes techniques.</br>Enfin il faut garder en tête qu’une documentation se met à jour puisque les applications ou processus peuvent évoluer !</br></p>",
            "customCss": {
            }
          }
        ]
      },
      {
        "title": "Mise en place de pipeline d'intégration continu et de développement continu (CI/CD)",
        "customCss": {},
        "direction": "row",
        "banner": {
          "headline": "Mise en place de pipeline d'intégration continu et de développement continu (CI/CD)",
          "image": {
            "src": "/img/cicdlogo.png",
            "alt": ""
          }
        },
        "elements": [
          {
            "type": "text",
            "content": "<p><h2>Qu’est-ce que cela veut dire ?</h2>Cette compétence est fondamentale dans le mouvement DevOps, j'ai donc à ce but acquis une expertise solide dans la mise en place de pipelines d'intégration continue (CI) et de développement continu (CD).<br />Cette compétence est cruciale pour automatiser et optimiser le cycle de vie des applications, de la phase de développement jusqu'au déploiement en production.<h2>Expertise en CI/CD avec ArgoCD et GitLab CI</h2>Mon expérience inclut l'utilisation avancée de GitLab CI et ArgoCD, deux outils puissants qui facilitent la mise en œuvre de pipelines CI/CD efficaces et robustes.<br />GitLab CI est un outil de CI/CD intégré à GitLab qui permet d'automatiser les tâches de compilation, de test et de déploiement.</p><div class='blog-img-wrapper'><img class='blog-img' src='/img/cicd.png'></div><p> Grâce à GitLab CI, j'ai pu configurer des pipelines qui:<li>Automatisent les tests unitaires et d'intégration pour assurer la qualité du code à chaque modification.</li><li>Déploient automatiquement les applications sur des environnements de test, de préproduction et de production, réduisant ainsi les erreurs humaines et accélérant les cycles de livraison.</li>ArgoCD, quant à lui, est un outil de CD spécifique à Kubernetes qui permet de gérer et de synchroniser les applications déployées dans des clusters Kubernetes. Mes réalisations avec ArgoCD comprennent:<li>La gestion déclarative des applications, assurant que l'état désiré est toujours maintenu à travers des définitions de manifeste.</li><li>L'intégration avec GitOps, permettant des déploiements continus en synchronisant automatiquement les modifications des dépôts Git avec les clusters Kubernetes.</li><h2> Quels sont les gains ?</h2>Les pipelines que j'ai mis en place apportent plusieurs avantages significatifs:<li>Fiabilité et répétabilité: En automatisant les processus de build et de déploiement, chaque nouvelle version du code suit le même chemin, réduisant les risques d'erreurs.</li><li>Détection rapide des erreurs: Les tests automatisés permettent de détecter rapidement les régressions et les bugs, garantissant ainsi une meilleure qualité de code.</li><li>Livraison rapide: Grâce à l'automatisation, les nouvelles fonctionnalités et corrections de bugs peuvent être livrées plus rapidement aux utilisateurs finaux, augmentant ainsi la satisfaction client.</li></br>Vous l'aurez compris, cette compétence est essentielle à toute entreprise adoptant le mouvement DevOps, cependant il est aussi important d'être vigilant quant à la complexité qu'elles peuvent apporter, par exemple les conflits de versions, la lenteur des bvbuilds et tests ou bien la cohérence entre les différents environnements (dev, test et prod).</p>",
            "customCss": {
            }
          }
        ]
      }
    ]
  }
}