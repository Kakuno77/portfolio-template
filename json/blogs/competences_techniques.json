{
  "slug": "Mes compétences techniques",
  "title": "Compétences techniques",
  "content": {
    "articles": [
      {
        "title": "Programmation de scripts shell",
        "customCss": {},
        "direction": "row",
        "banner": {
          "headline": "Programmation de scripts shell",
          "image": {
            "src": "/img/shell.png",
            "alt": ""
          }
        },
        "elements": [
          {
            "type": "text",
            "content": "<p><b>64%</b>, c’est le pourcentage de serveurs dans le monde qui utilisent des variantes de Unix, une famille de système d’exploitation particulièrement connue pour Linux.</br><br>Dans le domaine du DevOps, l'automatisation et l'efficacité sont essentielles pour gérer les infrastructures complexes. Les scripts shell jouent un rôle crucial dans ce contexte, permettant de simplifier et d'automatiser de nombreuses tâches administratives. Lorsqu'ils sont appliqués à la gestion d'un cluster Kubernetes, ces scripts deviennent encore plus puissants, offrant des moyens efficaces pour orchestrer et gérer des conteneurs à grande échelle.</br><h2>Pourquoi Utiliser des Scripts Shell en DevOps ?</h2>Les scripts shell, souvent écrits en Bash, permettent d'exécuter des commandes directement dans le terminal, de façon séquentielle et automatisée. Ils sont particulièrement utiles pour :<li><b>Automatisation des Tâches Répétitives</b> : Les scripts shell peuvent automatiser des tâches courantes comme les sauvegardes, les mises à jour de paquets, et les vérifications de système.</li><li><b>Gestion de la Configuration</b> : Ils facilitent le déploiement de configurations homogènes à travers plusieurs serveurs.</li><li><b>Intégration et Déploiement Continus (CI/CD)</b> : Les scripts peuvent être intégrés dans les pipelines CI/CD pour automatiser les tests et les déploiements.Kubernetes et les Scripts ShellKubernetes est une plateforme open source pour automatiser le déploiement, la mise à l'échelle et la gestion des applications conteneurisées. Utiliser des scripts shell avec Kubernetes permet de :<li><b>Déploiement et Gestion des Pods</b>: Automatiser le déploiement de pods, services et autres objets Kubernetes.</li><li><b>Surveillance et Logging</b> : Créer des scripts pour surveiller l'état des clusters et collecter les logs nécessaires pour le dépannage.</li><li><b>Mise à Jour et Rollback</b> : Automatiser les mises à jour et les retours en arrière des applications.</li><h2>Exemples de Scripts Shell pour Kubernetes</h2>Voici quelques exemples de scripts shell couramment utilisés dans la gestion de clusters Kubernetes :<li> Script de Déploiement</li><li> Script de Sauvegarde des Configurations</li><br>La programmation de scripts shell est une compétence précieuse pour les ingénieurs DevOps, en particulier lorsqu'il s'agit de gérer des clusters Kubernetes. Ces scripts permettent d'automatiser efficacement de nombreuses tâches, de garantir la cohérence des déploiements, et de simplifier la surveillance et la maintenance des infrastructures. En combinant la puissance de Kubernetes avec la flexibilité des scripts shell, les ingénieurs DevOps peuvent créer des solutions robustes et scalables adaptées aux besoins des entreprises modernes.</br></p>",
            "customCss": {
            }
          }
        ]
      },
      {
        "title": "Rédaction de documentation technique..",
        "customCss": {},
        "direction": "row",
        "banner": {
          "headline": "Rédaction de documentation technique..",
          "image": {
            "src": "/img/redaction.jpg",
            "alt": ""
          }
        },
        "elements": [
          {
            "type": "text",
            "content": "<p>Je suis convaincu que savoir écrire une documentation technique claire et accessible est une compétence fondamentale pour la réussite de tout projet. Cette documentation sert de guide précieux pour l'ensemble des acteurs impliqués, des développeurs aux data scientists.</br>Cependant elle a pour désavantage d’être fastidieuse et longue à faire, alors pourquoi documenter ?</br>La documentation technique est un élément essentiel pour plusieurs raisons :<li><b>Faciliter la compréhension des systèmes et des applications</b> : Une documentation claire et concise permet aux développeurs, aux testeurs et aux opérateurs de comprendre le fonctionnement des systèmes et des applications, facilitant ainsi leur utilisation et leur maintenance.</li><li><b>Améliorer la collaboration</b> : En centralisant la documentation sur un wiki.js, tous les membres de l'équipe ont accès aux mêmes informations, favorisant la communication</li><li><b>Réduire les erreurs et les incidents</b> : Une documentation détaillée permet d'anticiper les problèmes potentiels et de mettre en place des procédures de résolution efficaces, réduisant ainsi le nombre d'erreurs et d'incidents.</li><li><b>Accélérer le développement et la maintenance</b> : En disposant d'une documentation complète, les nouveaux membres de l'équipe peuvent rapidement se familiariser avec les systèmes et les applications, accélérant ainsi le processus de développement et de maintenance.</li><li><b>Assurer la continuité des connaissances</b> : Une documentation bien rédigée garantit la préservation des connaissances, même en cas de départ de membres clés de l'équipe.</li>Comprendre les enjeux de la documentation n’empêche pas d’être confronté à sa lourdeur. Il est donc essentiel de savoir ce qu’il faut documenter.Le champ d'application de la documentation technique est vaste et peut inclure une grande variété d’éléments :</br><li><b>L'architecture des systèmes et des applications</b> : Décrire l'architecture globale des systèmes et des applications, en mettant en évidence les composants, les interconnexions et les technologies utilisées.</li><li><b>Les processus de déploiement et de configuration</b> : Détailler les étapes nécessaires au déploiement et à la configuration des systèmes et des applications, incluant les environnements de développement, de test et de production.</li><li><b>Les fonctionnalités et les cas d’utilisation</b>: Expliquer les fonctionnalités des systèmes et des applications, en illustrant les cas d'utilisation typiques et les scénarios d'utilisation.</li><li><b>Les procédures de dépannage et de résolution des problèmes</b> : Fournir des instructions détaillées pour dépanner et résoudre les problèmes courants rencontrés lors de l'utilisation des systèmes et des applications.</li><li><b>Les bonnes pratiques et les recommandations</b> : Partager les bonnes pratiques et les recommandations pour l'utilisation efficace et sécurisée des systèmes et des applications.</li>En bref, adopter la rédaction de la documentation c’est améliorer la communication et la collaboration des équipes techniques.</br>Enfin il faut garder en tête qu’une documentation se met à jour puisque les applications ou processus peuvent évoluer !</br></p>",
            "customCss": {
            }
          }
        ]
      },
      {
        "title": "Automatiser la construction de la solution logicielle en configurant les chaînes de build et l’exécution des tests unitaires, fonctionnels et d’intégration afin de préparer le déploiement continu du logiciel",
        "customCss": {},
        "direction": "row",
        "banner": {
          "headline": "Automatiser la construction de la solution logicielle en configurant les chaînes de build et l’exécution des tests unitaires, fonctionnels et d’intégration afin de préparer le déploiement continu du logiciel",
          "image": {
            "src": "/img/K8S-logo.png",
            "alt": ""
          }
        },
        "elements": [
          {
            "type": "text",
            "content": "<p><h2>Qu’est-ce que cela veut dire ?</h2>Automatiser la construction de la solution logicielle et la mise en place de tests est l'art de créer un processus fluide et fiable pour transformer le code source en une application fonctionnelle prête à être déployée. Cela implique de configurer des chaînes de build robustes et d'exécuter des tests unitaires, fonctionnels et d'intégration de manière systématique. Cette compétence vise à garantir que chaque modification de code est testée de manière exhaustive, minimisant ainsi les erreurs et les problèmes potentiels lors du déploiement.Implémentation d’un CI/CDDans mon rôle en tant qu'ingénieur DevOps chez Eridanis, j'ai configuré des pipelines CI/CD (Continuous Integration/Continuous Deployment) à l'aide de GitLab CI/CD. Ces pipelines prenaient en charge la construction automatique, les tests automatisés et le déploiement sur des environnements de test, développement et de production.Le résultat a été une réduction significative des erreurs de déploiement et un déploiement plus rapide et plus fiable de nouvelles fonctionnalités.<h2>Mes 2 ans d’expériences</h2>J'ai acquis une expertise solide dans l'automatisation de la construction et des tests logiciels, en utilisant des outils tels que GitLab CI/CD.En tant qu'ingénieur DevOps junior, cette compétence occupe une place centrale dans mon profil. Elle est essentielle pour garantir la fiabilité, la qualité et la rapidité des déploiements logiciels, ce qui est crucial pour répondre aux exigences actuelles en matière de développement agile et de livraison continue.J'ai développé cette compétence tout au long de mon alternance grâce à divers projets. Cependant, il est important de noter que l'automatisation et la gestion des tests sont des domaines en constante évolution, bien évidemment je peux être amené à utiliser d’autres outils à l’avenir.De mon expérience, l'automatisation de la construction logicielle et des tests est essentielle, mais elle nécessite une approche équilibrée. Il faut prendre en compte la maintenance constante des pipelines automatisés et éviter la complexité excessive. Réviser régulièrement les tests pour éliminer les obsolètes est crucial, tout comme comprendre que l'intégration continue va au-delà de l'automatisation.<h2>Qu'améliorer ?</h2>La compétence en elle-même ne sera pas amenée à évoluer puisqu’elle fait partie des piliers de l’approche DevOps, cependant les outils utilisés seront amenés à évoluer. Aussi j’imagine qu’on peut laisser une porte ouverte au fait que cette compétence puisse être exploitée par d’autres approches/méthodologies.En résumé cette compétence évoluera en fonction des outils.</p>",
            "customCss": {
            }
          }
        ]
      }
    ]
  }
}